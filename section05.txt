Ex14
float factorial(int n){
  float a = 1;
  for (int i=0;i<n;i++){
    a *= (i + 1);
  }
  return a;
}

float fx(float x, int n){
  if (n == 0){
    return 1;
  }else{
    return fx(x, n - 1) + pow(x, n) / factorial(n);
  }
}

void setup(){
  float x = 1.0;
  boolean p = true;
  int memory = 0;
  for (int i=0;i<10;i++){
    float f = fx(x, i + 1);
    float g = abs(exp(1) - f);
    println(i + 1, f, exp(1), g);
    if (p && g < 0.01){
      p = false;
      memory = i + 1;
    }
  }
  println(memory);
}










Ex15
int gcd(int a, int b){
  while (b != 0){
    int prm = b;
    b = a % b;
    a = prm;
  }
  return a;
}

int multiGCD(int[] l){
  int ans = l[0];
  for (int i=1;i<l.length;i++) {
    ans = gcd(ans, l[i]);
  }
  return ans;
}

void setup() {
  int [] datalist = {98, 140, 84, 28, 42, 126};
  println(multiGCD(datalist));
}










Ex16
int search(int[] l, int tgt){
  int ct = 0;
  int divl = 0;
  int divh = l.length - 1;
  while (true){
    ct ++;
    int div = floor((divl + divh) / 2);
    if (tgt == l[div]){
      return div + 100 * ct;
    }else if ((divh - divl) <= 1){
      if (l[divh] == tgt){
        return divh + 100 * ct;
      }else if (l[divl] == tgt){
        return divl + 100 * ct;
      }else{
        return -100 * ct;
      }
    }else if (tgt > l[div]){
      divl = div;
    }else{ // (tgt < l[div])
      divh = div;
    }
  }
}

void setup(){
  int[] data = {0,1,2,4,5,6,7,9,10,12,13,15,16,17,18,19,20,21,23,26,27,28,29,30,31,33,34,35,37,38,39,40,41,42,44,46,47,48,49,51,52,53,54,55,56,57,59,60,61,63,64,65,67,68,71,72,73,74,75,76,77,78,79,80,83,84,85,86,87,89,90,91,92,93,94,95,96,97,98,99,101,102,104,105,107,108,110,111,112,113,114,115,117,118,119,120,123,124,125,127};
  //println(search(data, 3));
  float ctsum = 0.0;
  for (int i=0;i<128;i++){
    int k = search(data, i);
    int idx, ct;
    if (k < 0){
      idx = -1;
      ct = abs(k) / 100;
    }else{
      idx = k % 100;
      ct = (k - idx) / 100;
    }
    ctsum += ct;
    println(i, idx, ct, ctsum / (i + 1.0));
  }
}
